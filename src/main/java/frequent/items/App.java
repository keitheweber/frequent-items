/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package frequent.items;

import com.google.devtools.common.options.OptionsParser;
import frequent.items.io.BasketsFile;
import frequent.items.io.OutputFile;
import frequent.items.models.Basket;
import frequent.items.models.CliOptions;
import frequent.items.processing.APriori;
import frequent.items.processing.CreateInputFile;
import frequent.items.processing.OutputFileNameProvider;
import frequent.items.processing.PCY;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

public class App {

    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) throws IOException {
        LocalDateTime startTime = LocalDateTime.now();
        OptionsParser optionsParser = OptionsParser.newOptionsParser(CliOptions.class);
        optionsParser.parseAndExitUponError(args);

        CliOptions cliOptions = optionsParser.getOptions(CliOptions.class);

        if (cliOptions.generateInputFile) {
            CreateInputFile.createFile(cliOptions.inputFile, cliOptions.numberOfBaskets);
        } else {
            List<Basket> baskets = BasketsFile.readFile(cliOptions.inputFile);
            if (cliOptions.algorithm.equalsIgnoreCase("APriori")) {
                APriori aPriori = new APriori(cliOptions.support, baskets);
                aPriori.computeFrequentPairs();

                OutputFile.writeFile(OutputFileNameProvider.getOutputFileName(cliOptions), aPriori.getFrequentPairs(), startTime);
            } else if (cliOptions.algorithm.equalsIgnoreCase("PCY")) {
                PCY pcy = new PCY(cliOptions.support, baskets, getMaxItem(baskets));
                pcy.computeFrequentPairs();
                OutputFile.writeFile(OutputFileNameProvider.getOutputFileName(cliOptions), pcy.getFrequentPairs(), startTime);
            } else {
                throw new IllegalArgumentException("Unrecognized algorithm: " + cliOptions.algorithm);
            }
        }
    }

    private static int getMaxItem(List<Basket> baskets) {
        int max = 0;
        for (Basket basket : baskets) {
            for (Integer item : basket.getItems()) {
                max = Math.max(item, max);
            }
        }
        return max;
    }
}
